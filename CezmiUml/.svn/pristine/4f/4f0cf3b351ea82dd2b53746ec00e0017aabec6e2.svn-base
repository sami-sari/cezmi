package com.samisari.commands.uml;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

public class CmdClassWizard extends JDialog {
	CmdClass						command;
	public static final Object[]	fieldsColumnNames	= new Object[] { "Visibility", "static", "final", "synchronized", "volatile",
			"transient", "Type", "Name", "Description" };
	public static final JTable		fieldsTable			= new JTable(
			new Object[][] { { "private", false, false, false, false, false, "java.lang.String", "name", "Name" } }, fieldsColumnNames) {
															private Class<?>[] columnClasses = new Class<?>[] { String.class, Boolean.class,
																	Boolean.class, Boolean.class, Boolean.class, Boolean.class,
																	String.class, String.class, String.class, String.class };;

															public java.lang.Class<?> getColumnClass(int column) {
																return columnClasses[column];
															};
														};
	public static final Object[]	methodsColumnNames	= new Object[] { "Visibility", "abstract", "static", "final", "synchronized",
			"volatile", "transient", "Type", "Name", "Parameters" };
	public static final JTable		methodsTable		= new JTable(
			new Object[][] { { "public", false, false, false, false, false, false, "java.lang.String", "getName", "()" },
					{ "public", false, false, false, false, false, false, "", "setName", "(java.lang.String name)" } },
			methodsColumnNames) {
															private Class<?>[] columnClasses = new Class<?>[] { String.class, Boolean.class,
																	Boolean.class, Boolean.class, Boolean.class, Boolean.class,
																	Boolean.class, String.class, String.class, String.class,
																	String.class };;

															public java.lang.Class<?> getColumnClass(int column) {
																return columnClasses[column];
															};
														};

	JLabel							nameLbl				= new JLabel("Name");
	JTextField						nameTxt;
	JTextField						superClassTxt		= new JTextField();
	JTextField						interfacesTxt		= new JTextField();
	JButton							addFieldBtn			= new JButton("+");
	JButton							addMethodBtn		= new JButton("+");
	JScrollPane						fieldsScroll		= new JScrollPane(fieldsTable);
	JScrollPane						methodsScroll		= new JScrollPane(methodsTable);
	JButton							removeFieldBtn		= new JButton("-");
	JButton							removeMethodBtn		= new JButton("-");
	JButton							saveBtn				= new JButton("OK");

	public CmdClassWizard(CmdClass command) {
		super();
		setTitle("Table Wizard");
		setModal(true);
		setUndecorated(true);
		Point cpLoc = new Point((int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2 - 400),
				(int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2 - 300));
		cpLoc.x += command.getX();
		cpLoc.y += command.getY();
		setLocation(cpLoc.x, cpLoc.y);
		setCommand(command);
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
		setLayout(null);
		setSize(new Dimension(800, 620));
		nameLbl.setBounds(10, 10, 100, 20);
		add(nameLbl);
		nameTxt = new JTextField(command.getTitleText());
		nameTxt.setBounds(115, 10, 200, 20);
		add(nameTxt);

		JLabel superClassLbl = new JLabel("Super class");
		superClassLbl.setBounds(10, 35, 100, 20);
		add(superClassLbl);
		superClassTxt.setBounds(110, 35, 250, 20);
		add(superClassTxt);

		JLabel interfacesLbl = new JLabel("Interfaces");
		interfacesLbl.setBounds(380, 35, 100, 20);
		add(interfacesLbl);
		interfacesTxt.setBounds(480, 35, 300, 20);
		add(interfacesTxt);
		Object[] emptyFieldRow = new Object[] { "private", false, false, false, false, false, "java.lang.String", "oid", "Oid field" };
		Object[] emptyMethodRow = new Object[] { "public", false, false, false, false, false, false, "java.lang.String", "oid",
				"Oid field" };

		addTable(85, fieldsScroll, addFieldBtn, fieldsTable, emptyFieldRow, fieldsColumnNames, removeFieldBtn);
		addTable(320, methodsScroll, addMethodBtn, methodsTable, emptyMethodRow, methodsColumnNames, removeMethodBtn);

		saveBtn.setMargin(new Insets(0, 0, 0, 0));
		saveBtn.setBounds(710, 555, 70, 20);
		saveBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				save();
				CmdClassWizard.this.setVisible(false);
			}
		});
		add(saveBtn);

	}

	private void save() {
		// command.setFields(fields);
		/*
		 * "Visibility", "static", "final", "synchronized", "volatile",
		 * "transient", "Type", "Name", "Description"
		 */
		int columnCount = fieldsTable.getModel().getColumnCount();
		int rowCount = fieldsTable.getRowCount();
		Object[][] data = new Object[rowCount][columnCount];
		StringBuilder sb = new StringBuilder();
		for (int row = 0; row < rowCount; row++) {
			String visibility = (String) fieldsTable.getValueAt(row, 0);
			Boolean isStatic = (Boolean) fieldsTable.getValueAt(row, 1);
			Boolean isFinal = (Boolean) fieldsTable.getValueAt(row, 2);
			Boolean isSynchronised = (Boolean) fieldsTable.getValueAt(row, 3);
			Boolean isVolatile = (Boolean) fieldsTable.getValueAt(row, 4);
			Boolean isTransient = (Boolean) fieldsTable.getValueAt(row, 5);
			String dataType = (String) fieldsTable.getValueAt(row, 6);
			String name = (String) fieldsTable.getValueAt(row, 7);
			String description = (String) fieldsTable.getValueAt(row, 8);
			if (visibility != null && visibility.length() > 0) {
				sb.append(visibility);
				sb.append(" ");
			}
			if (isStatic) {
				sb.append("static");
				sb.append(" ");
			}
			if (isFinal) {
				sb.append("final");
				sb.append(" ");
			}
			if (isSynchronised) {
				sb.append("synchronized");
				sb.append(" ");
			}
			if (isVolatile) {
				sb.append("volatile");
				sb.append(" ");
			}
			if (isTransient) {
				sb.append("transient");
				sb.append(" ");
			}
			sb.append(dataType);
			sb.append("(");
			sb.append(name);
			sb.append(";");
		}
		sb.deleteCharAt(sb.length() - 1);
		getCommand().setFields(sb.toString());
	}

	private void addTable(int y, final JScrollPane scroll, final JButton addBtn, final JTable table, final Object[] emptyRow,
			final Object[] columnNames, final JButton removeButton) {
		JComboBox accessModifierCombo = new JComboBox<>();
		accessModifierCombo.addItem("");
		accessModifierCombo.addItem("public");
		accessModifierCombo.addItem("private");
		accessModifierCombo.addItem("protected");
		table.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(accessModifierCombo));
		scroll.setBounds(10, y + 25, 770, 200);
		add(scroll);

		addBtn.setMargin(new Insets(0, 0, 0, 0));
		addBtn.setBounds(10, y, 20, 20);
		addBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				int columnCount = table.getModel().getColumnCount();
				int rowCount = table.getRowCount();
				Object[][] data = new Object[rowCount + 1][columnCount];
				int row = 0;
				for (; row < rowCount; row++) {
					for (int column = 0; column < columnCount; column++) {
						Object val = table.getValueAt(row, column);
						data[row][column] = val;
					}
				}
				// Empty line
				for (int column = 0; column < columnCount; column++) {
					data[row] = emptyRow;
				}
				table.setModel(new DefaultTableModel(data, columnNames));
				scroll.repaint();
			}
		});
		add(addBtn);

		removeFieldBtn.setMargin(new Insets(0, 0, 0, 0));
		removeFieldBtn.setBounds(40, 85, 20, 20);
		removeFieldBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				int columnCount = table.getModel().getColumnCount();
				int rowCount = table.getRowCount();
				Object[][] data = new Object[rowCount - 1][columnCount];
				int row = 0;
				int removed = 0;
				if (table.getSelectedRow() > -1) {
					for (; row < rowCount; row++) {
						if (row != table.getSelectedRow())
							for (int column = 0; column < columnCount; column++) {
								Object val = table.getValueAt(row, column);
								data[row - removed][column] = val;
							}
						else
							removed = 1;
					}
					table.setModel(new DefaultTableModel(data, columnNames));
					scroll.repaint();
				}
			}
		});
		add(removeFieldBtn);

	}

	private void addMethodsTable() {
		methodsScroll.setBounds(10, 420, 770, 200);
		add(methodsScroll);

		addMethodBtn.setMargin(new Insets(0, 0, 0, 0));
		addMethodBtn.setBounds(10, 400, 20, 20);
		addMethodBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				int columnCount = methodsTable.getModel().getColumnCount();
				int rowCount = methodsTable.getRowCount();
				Object[][] data = new Object[rowCount + 1][columnCount];
				int row = 0;
				for (; row < rowCount; row++) {
					for (int column = 0; column < columnCount; column++) {
						Object val = methodsTable.getValueAt(row, column);
						data[row][column] = val;
					}
				}
				// Empty line
				for (int column = 0; column < columnCount; column++) {
					data[row] = new Object[] { "private", false, false, false, false, false, "java.lang.String", "oid", "Oid field" };
				}
				methodsTable.setModel(new DefaultTableModel(data, methodsColumnNames));
				methodsScroll.repaint();
			}
		});
		add(addMethodBtn);

		removeMethodBtn.setMargin(new Insets(0, 0, 0, 0));
		removeMethodBtn.setBounds(40, 85, 20, 20);
		removeMethodBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				int columnCount = methodsTable.getModel().getColumnCount();
				int rowCount = methodsTable.getRowCount();
				Object[][] data = new Object[rowCount - 1][columnCount];
				int row = 0;
				int removed = 0;
				if (methodsTable.getSelectedRow() > -1) {
					for (; row < rowCount; row++) {
						if (row != methodsTable.getSelectedRow())
							for (int column = 0; column < columnCount; column++) {
								Object val = methodsTable.getValueAt(row, column);
								data[row - removed][column] = val;
							}
						else
							removed = 1;
					}
					methodsTable.setModel(new DefaultTableModel(data, methodsColumnNames));
					methodsScroll.repaint();
				}
			}
		});
		add(removeMethodBtn);

		saveBtn.setMargin(new Insets(0, 0, 0, 0));
		saveBtn.setBounds(600, 400, 70, 20);
		saveBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				int columnCount = methodsTable.getModel().getColumnCount();
				int rowCount = methodsTable.getRowCount();
				Object[][] data = new Object[rowCount - 1][columnCount];
				StringBuilder sb = new StringBuilder();
				for (int row = 0; row < rowCount; row++) {
					String name = (String) methodsTable.getValueAt(row, 0);
					String dataType = (String) methodsTable.getValueAt(row, 1);
					Integer dataLength = Integer.parseInt((String) methodsTable.getValueAt(row, 2));
					Integer precision = Integer.parseInt((String) methodsTable.getValueAt(row, 2));
					Boolean nullable = (Boolean) methodsTable.getValueAt(row, 4);
					Boolean unique = (Boolean) methodsTable.getValueAt(row, 5);
					String comment = (String) methodsTable.getValueAt(row, 6);
					sb.append(name);
					sb.append(" ");
					sb.append(dataType);
					sb.append("(");
					sb.append(dataLength);
					sb.append(")");
					sb.append(nullable ? "" : "not null");
					sb.append(" ");
					sb.append(unique ? "unique" : "");
					sb.append(";");
				}
				sb.deleteCharAt(sb.length() - 1);
				getCommand().setFields(sb.toString());
			}
		});
	}

	private void setCommand(CmdClass command) {
		this.command = command;

	}

	private CmdClass getCommand() {
		return command;
	}

}
