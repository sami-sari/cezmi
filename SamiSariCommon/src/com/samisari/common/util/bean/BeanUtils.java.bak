package com.samisari.common.util.bean;

import java.awt.Color;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.beans.PropertyDescriptor;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Base64;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.imageio.ImageIO;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.samisari.common.util.ParserUtils;

public class BeanUtils {
	private static Log LOGGER = LogFactory.getLog(BeanUtils.class);
	public static void string2Value(Object bean,
			PropertyDescriptor propertyInfo, String propertyValue)
			throws Exception {
		Class<?> type = propertyInfo.getPropertyType();
		try {
			if (type.equals(String.class)) {
				propertyInfo.getWriteMethod().invoke(bean, propertyValue);
			} else if (propertyValue == null || propertyValue.isEmpty()) {
				propertyInfo.getWriteMethod().invoke(bean, (Object) null);
			} else if (type.equals(Integer.class) || type.equals(int.class)) {
				propertyInfo.getWriteMethod().invoke(bean,
						new Integer(new Integer(propertyValue)));
			} else if (type.equals(Float.class) || type.equals(float.class)) {
				propertyInfo.getWriteMethod().invoke(bean,
						new Float(propertyValue));
			} else if (type.equals(Double.class) || type.equals(double.class)) {
				propertyInfo.getWriteMethod().invoke(bean,
						new Double(propertyValue));
			} else if (type.equals(Boolean.class) || type.equals(boolean.class)) {
				propertyInfo.getWriteMethod().invoke(bean,
						new Boolean(propertyValue));
			} else if (type.equals(Font.class)) {
				propertyInfo.getWriteMethod().invoke(bean,
						String2Font(propertyValue));
			} else if (type.equals(Color.class)) {
				propertyInfo.getWriteMethod().invoke(bean,
						string2Color(propertyValue));
			} else if (type.equals(Rectangle.class)) {
				propertyInfo.getWriteMethod().invoke(bean,
						String2Rectangle(propertyValue));
			} else if (type.equals(BufferedImage.class)) {
				propertyInfo.getWriteMethod().invoke(bean,
						String2BufferedImage(propertyValue));
			} else {
				throw new Exception(type.getName()
						+ " could not be deserialised "
						+ bean.getClass().getName() + " "
						+ propertyInfo.getName() + " property.");
			}
		} catch (Exception e) {
			throw e;
		}
	}

	public static String value2String(Object propertyValue) {
		try {
			if (propertyValue == null) {
				return "";
			}
			Class<?> type = propertyValue.getClass();
			if (propertyValue instanceof String) {
				return (String) propertyValue;
			}
			if ((propertyValue instanceof Integer)
					|| (propertyValue instanceof Float)
					|| (propertyValue instanceof Double)
					|| (propertyValue instanceof Boolean)) {
				return propertyValue.toString();
			}
			if ((propertyValue instanceof Font)) {
				return Font2String((Font) propertyValue);
			}
			if ((propertyValue instanceof Color)) {
				return Color2String((Color) propertyValue);
			}
			if ((propertyValue instanceof Rectangle)) {
				return Rectangle2String((Rectangle) propertyValue);
			}
			if ((propertyValue instanceof BufferedImage)) {
				return BufferedImage2String((BufferedImage) propertyValue);
			}
			
			throw new Exception(type.getName() + " could not be serialised ");
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	public static String BufferedImage2String(BufferedImage image) {
		String result = "";
		ByteArrayOutputStream imageStream = new ByteArrayOutputStream(1024);
		try {
			ImageIO.write(image, "png", imageStream);
			return Base64.getEncoder()
					.encodeToString(imageStream.toByteArray());
		} catch (IOException e) {
			e.printStackTrace();
		}
		return result;
	}

	public static Object String2BufferedImage(String value) {
		byte[] imageBytes = Base64.getDecoder().decode(value);
		ByteArrayInputStream imageStream = new ByteArrayInputStream(imageBytes);
		try {
			return ImageIO.read(imageStream);
		} catch (Exception e) {
			LOGGER.error("Error",e);
		} finally {
			try {
				// imageStream.close();
			} catch (Exception e) {

			}
		}
		return null;
	}

	public static String Rectangle2String(Rectangle value) {
		return "java.awt.Rectangle[x=" + value.x + ",y=" + value.y + ",width="
				+ value.width + "height=" + value.height + "]";
	}

	public static Object String2Rectangle(String value) {
		Pattern pattern = Pattern
				.compile("java\\.awt\\.Rectangle\\[x=(\\d+),y=(\\d+),width=(\\d+),height=(\\d+)\\]");
		Matcher matcher = pattern.matcher(value);
		if (matcher.matches()) {
			return new Rectangle(Integer.parseInt(matcher.group(1)),
					Integer.parseInt(matcher.group(2)),
					Integer.parseInt(matcher.group(3)),
					Integer.parseInt(matcher.group(4)));
		}

		return null;
	}

	public static String Color2String(Color value) {
		return "java.awt.Color[r=" + value.getRed() + ",g=" + value.getGreen()
				+ ",b=" + value.getBlue() + "]";
	}

	public static Color string2Color(String value) {
		Pattern pattern = Pattern
				.compile("java\\.awt\\.Color\\[r=(\\d+),g=(\\d+),b=(\\d+)\\]");
		Matcher matcher = pattern.matcher(value);
		if (matcher.matches()) {
			return new Color(Integer.parseInt(matcher.group(1)),
					Integer.parseInt(matcher.group(2)),
					Integer.parseInt(matcher.group(3)));
		} else {

			if (value.startsWith("ColorRGB(")) {
				int[] start = { 0 };
				int r = Integer.parseInt(ParserUtils.getTextBetween(value, "(",
						",", start));
				int g = Integer.parseInt(ParserUtils.getTextBetween(value, "",
						",", start));
				int b = Integer.parseInt(ParserUtils.getTextBetween(value, "",
						")", start));
				return new Color(r, g, b);
			} else if (value.startsWith("java.awt.Color[r=")) {
				int[] start = { 0 };
				int r = Integer.parseInt(ParserUtils.getTextBetween(value,
						"r=", ",", start));
				int g = Integer.parseInt(ParserUtils.getTextBetween(value,
						"g=", ",", start));
				int b = Integer.parseInt(ParserUtils.getTextBetween(value,
						"b=", "]", start));
				return new Color(r, g, b);
			}
		}

		return null;
	}

	public static String Font2String(Font value) {
		return "java.awt.Font[family="
				+ value.getFamily()
				+ ",name="
				+ value.getName()
				+ ",style="
				+ (value.getStyle() == Font.BOLD ? "bold"
						: (value.getStyle() == Font.PLAIN ? "plain"
								: (value.getStyle() == Font.ITALIC ? "italic"
										: (value.getStyle() == (Font.BOLD & Font.ITALIC) ? "bolditalic"
												: "")))) + ",size="
				+ value.getSize() + "]";
	}

	public static Font String2Font(String value) {
		Pattern pattern = Pattern
				.compile("java\\.awt\\.Font\\[family=([^,]+),name=([^,]+),style=([^,]+),size=(\\d+)]");
		Matcher matcher = pattern.matcher(value);
		if (matcher.matches()) {
			return new Font(
					matcher.group(2),
					("bold".equals(matcher.group(3)) ? Font.BOLD
							: ("plain".equals(matcher.group(3)) ? Font.PLAIN
									: ("italic".equals(matcher.group(3)) ? Font.ITALIC
											: ("bolditalic".equals(matcher
													.group(3)) ? Font.BOLD
													& Font.ITALIC : null)))),
					Integer.parseInt(matcher.group(4)));
		} else {
			if (value.startsWith("Font(")) {
				int[] start = { 0 };
				String familly = ParserUtils.getTextBetween(value, "(", ",", start);
				int style = Integer.parseInt(ParserUtils.getTextBetween(value, "", ",", start));
				int size = Integer.parseInt(ParserUtils.getTextBetween(value, "", ")", start));
				return new Font(familly, style, size);
			}
		}

		return null;
	}

}
