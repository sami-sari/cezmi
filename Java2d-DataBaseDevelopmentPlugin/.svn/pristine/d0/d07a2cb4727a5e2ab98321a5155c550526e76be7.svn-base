package com.samisari.graphics.commands;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.io.InputStreamReader;
import java.io.Serializable;

import org.apache.log4j.Logger;

import com.samisari.cezmi.component.CmdLayer;
import com.samisari.cezmi.core.AbstractCommand;
import com.samisari.cezmi.core.CommandManager;
import com.samisari.cezmi.core.ConsolePropertyManager;
import com.samisari.cezmi.core.History;
import com.samisari.guidesigner.CmdWindow;

public class CmdTable extends CmdLayer<AbstractCommand> implements Serializable {
	private static final Logger	logger				= Logger.getLogger(CmdTable.class);
	private static final long	serialVersionUID	= 1L;

	// private History<CmdTableColumn> columns = new History<CmdTableColumn>();
	private String				cmdDatabaseId;
	private CmdWindow			command;

	private enum Status {
		START, DRAGGING, WIZARD
	}

	private Status myStatus;

	public CmdTable() {
		super();
		command = new CmdWindow();
		command.setTitleText("*Bana bir isim ver");
		command.setBorderColor(Color.BLACK);
	}

	@Override
	public void run() {
		myStatus = Status.START;

	}

	// public List<CmdTableColumn> getColumns() {
	// return columns;
	// }
	//
	// public void setColumns(History<CmdTableColumn> columns) {
	// this.columns = columns;
	// getComponents().clear();
	// addComponent(command);
	// for (CmdTableColumn column : columns) {
	// column.setX(0);
	// column.setY(0);
	// column.setWidth(getWidth());
	// addComponent(column);
	// }
	// }

	public String getCmdDatabaseId() {
		return cmdDatabaseId;
	}

	public void setCmdDatabaseId(String cmdDatabaseId) {
		this.cmdDatabaseId = cmdDatabaseId;
	}

	@Override
	public void paint(Graphics g) {
		if (myStatus == Status.DRAGGING) {
			// logger.debug("PAINTING DRAGGING WÄ±ndow");
			command.paint(g);
		} else {
			logger.debug(getClass().getSimpleName() + "painting @(" + getX() + "," + getY() + ")");
			Color tempColor = g.getColor();
			Font tempFont = g.getFont();
			g.setColor(Color.BLACK);
			super.paint(g);
			g.setFont(tempFont);
			g.setColor(tempColor);
		}
	}

	@Override
	public void mouseMoved(int x, int y) {
		if (myStatus.equals(Status.DRAGGING)) {
			command.mouseMoved(x, y);
		}
	}

	public static String getCommandName() {
		return "DB Table";
	}

	public void showWizard() {
		new CmdTableWizard(ConsolePropertyManager.getInstance().getApplicationFrame(), this);
	}

	@Override
	public void mouseClicked(int x, int y) {
		if (myStatus == Status.START) {
			logger.debug("START MouseClicked");
			command.mouseClicked(x, y);
			myStatus = Status.DRAGGING;
		} else if (myStatus == Status.DRAGGING) {
			logger.debug("DRAGGING MouseClicked");
			command.mouseClicked(x, y);
			command.setSelected(true);
			myStatus = Status.WIZARD;
			CommandManager.getInstance().setCommand(this);
		}
		if (myStatus == Status.WIZARD) {
			showWizard();
			super.run();
			myStatus = Status.START;
		}

	}

	@Override
	public void openContextMenu() {
		super.openContextMenu();
		showWizard();
	}

	@Override
	public void deserialise(InputStreamReader in) throws Exception {
		super.deserialise(in);
	}

	@Override
	public String toString() {
		return getName();
	}

	@Override
	public void setName(String name) {
		super.setName(name);
		command.setTitleText(name);
		command.setName(name);
	}

	@Override
	public void setBounds(Rectangle bounds) {
		super.setBounds(bounds);
		command.setBounds(bounds);
	}

	@Override
	public void setComponents(History components) {
		super.setComponents(components);
	}

	public CmdWindow getCommand() {
		return command;
	}

	public void setCommand(CmdWindow command) {
		this.command = command;
	}

	@Override
	public void boundaryChanged(Rectangle oldBounds, Rectangle newBounds) {
		// Good for moving sucks when scaling
		History h = getComponents();
		int maxY = 0;
		if (originalChildrenBounds != null && !originalChildrenBounds.isEmpty()) {
			for (AbstractCommand c : h) {
				Rectangle r = originalChildrenBounds.get(c.getId());
				if (r==null) {
					originalChildrenBounds.put(c.getId(), c.getBounds());
					r=c.getBounds();
				}
				double scalex = ((double) newBounds.width) / ((double) originalBounds.width);
				int x = (int) ((r.getX()) * scalex);
				int width = (int) ((r.getWidth()) * scalex);
				int y = r.y;
				int height = r.height;
				if (y + height > maxY && c instanceof CmdTableColumn) {
					maxY = y + height;
				}
				logger.info("Boundary change " + c.getId() + " " + c.toString() + " " + r.height + "/" + newBounds.height);
				Rectangle newCBounds = new Rectangle(x, y, width, height);
				Rectangle oldCBounds = c.getBounds();
				
				c.setBounds(newCBounds);
				c.boundaryChanged(oldCBounds, newCBounds);
			}

			for (AbstractCommand c : h) {
				if (c instanceof CmdWindow ) {
					Rectangle newCBounds = c.getBounds();
					Rectangle oldCBounds = c.getBounds();
					newCBounds.height = maxY;
					c.setBounds(newCBounds);
					c.boundaryChanged(oldCBounds, newCBounds);
				}
			}

		}
		if (originalBounds != null && !originalBounds.isEmpty() && maxY > 0 && maxY != newBounds.height) {
			oldBounds = newBounds;
			newBounds.height = maxY;
			setBounds(newBounds);
			boundaryChanged(oldBounds, newBounds);
		}
	}
}
